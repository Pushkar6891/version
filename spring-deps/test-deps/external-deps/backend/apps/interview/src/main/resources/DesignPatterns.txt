Design Pattern
Industry Standard Approach to solve a reoccurring problem in software
Re-usability, Robust, Highly maintainable code

Creational (Create Object in loose couple manner)
Singleton
Factory
Abstract Factory
Builder
Prototype

Structural
Adapter
Bridge
Composite
Decorator
Facade
Proxy
Flyweight

Behavioural
Chain of Responsibility
Template Method
Observer
Strategy
Mediator
Command
State
Visitor
Interpreter
Iterator
Memento

Singleton
----------------------------------------------------
One and only one instance per JVM
Global Access Point to retrieve instance
Approaches to create Singleton:
Eager initialization
Lazy initialization
Static block initialization
Thread Safe Singleton
Bill Pugh Singleton (internal static class)
Reflection : Create and Destroy
Cloning : Create and Destroy
Enum Singleton
Serialization : Create and Destroy
Example of Singleton within JDK

private static variable of same class which is the only instance
private constructor
public getInstance method acting as global access point

Eager
Drawback:
Create Instance even before it is used
Exception Handling
Utility:
Can be used when app is not using a lot of resources i.e. File Connection, DB Connection

Static
Drawback:
Create Instance even before it is used

Lazy
Drawback:
Works fine in a single threaded environment but fails in multithreaded environment
Solution:
Double Check Locking

Bill Pugh
This is Thread Safe approach
static inner class
static getInstance

Reflection
Solution:
Using enum
Problem:
enum uses eager initialization

Serialization
Use case:
Singleton in Distributed System we use this

Cloning
readResolve : throw CloneNotSupportedException

Use Case Singleton
Runtime Class
Desktop Class
System Class
Logging
Caching
ThreadPool

Factory
----------------------------------------------------
Class.forName(com.mysql.cj.jdbc.driver)
DriverManager.getConnection()
Calendar.getInstance()
URL.openConnection()

Adapter
----------------------------------------------------
Two unrelated interfaces can work together